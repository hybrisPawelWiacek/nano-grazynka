{
  "id": "perplexity-ask",
  "name": "Perplexity Ask MCP Server",
  "status": "active",
  "transports": ["stdio"],
  "runtime": "node",
  "deploy": {
    "kind": "npx",
    "command": "npx",
    "args": ["-y", "server-perplexity-ask"]
  },
  "envSchema": [
    {
      "name": "PERPLEXITY_API_KEY",
      "description": "Perplexity API key for accessing the Sonar API",
      "required": true,
      "example": "pplx-..."
    }
  ],
  "ports": [],
  "healthCheck": {
    "command": "echo 'Perplexity MCP server configured'"
  },
  "docs": [
    {
      "title": "Perplexity Ask MCP Server",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/perplexity-ask"
    },
    {
      "title": "Perplexity API Documentation",
      "url": "https://docs.perplexity.ai/api-reference/introduction"
    }
  ],
  "useCases": {
    "generic": [
      "Deep web research and information gathering",
      "Real-time information retrieval",
      "Fact-checking and verification",
      "Comprehensive topic exploration"
    ],
    "project": [
      "Research MCP server capabilities and configurations",
      "Gather latest documentation for server cards",
      "Discover best practices for MCP implementations"
    ]
  },
  "prosCons": {
    "pros": [
      "Superior to WebSearch for complex research queries",
      "Access to up-to-date web information",
      "Comprehensive search across multiple sources",
      "AI-powered summarization of results",
      "Supports conversational queries with system prompts"
    ],
    "cons": [
      "Requires API key with rate limits",
      "Costs associated with API usage",
      "Dependent on external service availability"
    ]
  },
  "systemPromptConfig": {
    "description": "Perplexity-ask supports custom system prompts via the messages array. Always include a persona-based system prompt to get targeted, practical responses.",
    "personas": {
      "seniorDeveloper": {
        "prompt": "You are a senior software developer with 10+ years of production experience. Focus on practical, battle-tested solutions that work in real-world scenarios. Prioritize maintainability, performance, and debugging considerations. Provide hands-on advice with specific code examples and gotchas to avoid.",
        "useCase": "Bug fixes, implementation details, debugging strategies"
      },
      "solutionArchitect": {
        "prompt": "You are a solution architect focusing on system design and best practices. Emphasize scalability, design patterns, architectural decisions, and trade-offs. Provide guidance on technology selection, integration patterns, and long-term maintainability.",
        "useCase": "System design, technology selection, architectural patterns"
      },
      "devOpsEngineer": {
        "prompt": "You are a DevOps engineer specializing in CI/CD, containerization, and infrastructure. Focus on deployment strategies, monitoring, performance optimization, and operational excellence. Provide practical automation and tooling recommendations.",
        "useCase": "Deployment issues, Docker configs, CI/CD pipelines"
      },
      "securityExpert": {
        "prompt": "You are a security engineer focused on secure coding practices and vulnerability prevention. Emphasize security best practices, common vulnerabilities, authentication/authorization patterns, and compliance requirements.",
        "useCase": "Security reviews, vulnerability fixes, auth implementation"
      },
      "mvpBuilder": {
        "prompt": "You are a pragmatic developer focused on shipping MVPs quickly. Prioritize working solutions over perfection, recommend battle-tested libraries over custom implementations, and suggest the simplest approach that could work.",
        "useCase": "Rapid prototyping, MVP features, quick solutions"
      }
    },
    "defaultPersona": "seniorDeveloper",
    "usage": "Always include appropriate persona as system message in messages array",
    "example": {
      "messages": [
        {
          "role": "system",
          "content": "[Select appropriate persona prompt from above]"
        },
        {
          "role": "user",
          "content": "Your actual query here"
        }
      ]
    },
    "bestPractices": [
      "Match persona to the task at hand",
      "For bug investigations, use seniorDeveloper persona",
      "For system design, use solutionArchitect persona",
      "For quick fixes, use mvpBuilder persona",
      "Combine personas when needed (e.g., security + architect)"
    ]
  },
  "toolSelectionProtocol": {
    "primaryUse": [
      "Complex research requiring multiple sources",
      "Understanding new technologies or frameworks",
      "Finding best practices and patterns",
      "Researching error messages with context"
    ],
    "preferOverNative": [
      "Use instead of WebSearch for research tasks",
      "Use when WebFetch would require multiple calls",
      "Use for synthesizing information from multiple sources"
    ],
    "fallbackToNative": [
      "Use WebSearch if Perplexity API is down",
      "Use WebFetch for specific documentation pages",
      "Use Grep/Read for local code exploration"
    ]
  },
  "agenticUsefulness": {
    "humanVerificationRating": 3,
    "aiAgentRating": 4,
    "ratingRationale": {
      "human": "Moderate - Provides summarized answers with sources that humans can verify. Increases transparency by citing references, making it easier to validate AI's research.",
      "agent": "High - Acts as a research assistant providing summarized, contextual answers. Reduces hallucination by grounding responses in current web data. Essential for understanding new technologies and finding solutions."
    },
    "bestPractices": [
      "ALWAYS include appropriate persona system prompt for targeted responses",
      "For bug investigations: use seniorDeveloper persona",
      "For architecture decisions: use solutionArchitect persona",
      "For quick MVPs: use mvpBuilder persona",
      "Use for complex research before implementation",
      "Combine with memory to cache frequently needed information",
      "Trust the summarized patterns and apply them directly"
    ],
    "humanRole": "Review sources and validate summarized conclusions",
    "agentRole": "Primary research tool for technical questions and best practices",
    "integrationSynergies": [
      "Context7 for official docs + Perplexity for community solutions",
      "Memory/OpenMemory to persist research findings",
      "Sequential Thinking to plan research strategy",
      "GitHub to verify implementation examples"
    ]
  }
}