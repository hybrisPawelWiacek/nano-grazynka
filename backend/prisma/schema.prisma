// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User management models
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  passwordHash      String
  tier              String    @default("free") // free, pro, business
  creditsUsed       Int       @default(0)
  creditsResetDate  DateTime  @default(now())
  createdAt         DateTime  @default(now())
  lastLoginAt       DateTime?
  
  voiceNotes        VoiceNote[]
  sessions          Session[]
  usageLogs         UsageLog[]
  
  @@index([email])
  @@index([tier])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // upload, process, export, reprocess
  timestamp DateTime @default(now())
  metadata  String?  // JSON for additional data
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp])
}

model VoiceNote {
  id               String   @id @default(cuid())
  userId           String?  // Made optional for anonymous users
  sessionId        String?  // For anonymous users
  title            String
  originalFilePath String
  fileSize         Int
  mimeType         String
  language         String
  status           String
  tags             String   @default("[]") // JSON array
  userPrompt       String?  // Custom user instructions for summarization
  whisperPrompt    String?  // Custom prompt for Whisper transcription
  
  // Multi-model transcription fields
  transcriptionModel    String?     @default("gpt-4o-transcribe")  // Model selection
  geminiSystemPrompt    String?     // System instructions for Gemini
  geminiUserPrompt      String?     // User context for Gemini (1M tokens)
  refinedText           String?     // After LLM refinement (optional)
  refinementPrompt      String?     // Context used for refinement
  
  // AI-generated metadata fields
  aiGeneratedTitle      String?     // AI-generated 3-4 word title
  briefDescription      String?     // AI-generated 10-15 word summary
  derivedDate           DateTime?   // Date extracted from content
  
  errorMessage     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  version          Int      @default(1)

  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  transcriptions   Transcription[]
  summaries        Summary[]
  events           Event[]

  @@index([userId, status])
  @@index([userId, createdAt])
  @@index([userId, updatedAt])
  @@index([sessionId])
}

model Transcription {
  id              String   @id @default(cuid())
  voiceNoteId     String   @unique
  text            String
  language        String
  duration        Float
  confidence      Float    @default(0.0)
  wordCount       Int      @default(0)
  timestamp       DateTime @default(now())

  voiceNote       VoiceNote @relation(fields: [voiceNoteId], references: [id], onDelete: Cascade)
  summaries       Summary[]

  @@index([voiceNoteId])
}

model Summary {
  id              String   @id @default(cuid())
  voiceNoteId     String   @unique
  transcriptionId String
  summary         String
  keyPoints       String   // JSON array
  actionItems     String   // JSON array
  language        String
  timestamp       DateTime @default(now())

  voiceNote       VoiceNote @relation(fields: [voiceNoteId], references: [id], onDelete: Cascade)
  transcription   Transcription @relation(fields: [transcriptionId], references: [id], onDelete: Cascade)

  @@index([voiceNoteId])
  @@index([transcriptionId])
}

model Event {
  id          String   @id @default(cuid())
  eventId     String   @unique
  aggregateId String
  eventType   String
  payload     String   // JSON
  occurredAt  DateTime @default(now())

  voiceNote   VoiceNote? @relation(fields: [aggregateId], references: [id], onDelete: Cascade)

  @@index([aggregateId])
  @@index([occurredAt])
}

// Anonymous session tracking
model AnonymousSession {
  id          String   @id @default(cuid())
  sessionId   String   @unique
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime @default(now())
  
  @@index([sessionId])
  @@index([createdAt])
}
