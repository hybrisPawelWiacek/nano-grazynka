generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(cuid())
  email            String      @unique
  passwordHash     String
  tier             String      @default("free")
  creditsUsed      Int         @default(0)
  creditsResetDate DateTime    @default(now())
  createdAt        DateTime    @default(now())
  lastLoginAt      DateTime?
  entities         Entity[]
  projects         Project[]
  sessions         Session[]
  usageLogs        UsageLog[]
  voiceNotes       VoiceNote[]

  @@index([email])
  @@index([tier])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  metadata  String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
}

model VoiceNote {
  id                 String         @id @default(cuid())
  userId             String?
  sessionId          String?
  title              String
  originalFilePath   String
  fileSize           Int
  mimeType           String
  language           String
  status             String
  tags               String         @default("[]")
  userPrompt         String?
  whisperPrompt      String?
  transcriptionModel String?        @default("gpt-4o-transcribe")
  geminiSystemPrompt String?
  geminiUserPrompt   String?
  refinedText        String?
  refinementPrompt   String?
  aiGeneratedTitle   String?
  briefDescription   String?
  derivedDate        DateTime?
  duration           Float?
  projectId          String?
  errorMessage       String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  version            Int            @default(1)
  entityUsage        EntityUsage[]
  events             Event[]
  projectNotes       ProjectNote[]
  summaries          Summary?
  transcriptions     Transcription?
  project            Project?       @relation(fields: [projectId], references: [id])
  user               User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, createdAt])
  @@index([userId, updatedAt])
  @@index([sessionId])
  @@index([projectId])
}

model Transcription {
  id          String    @id @default(cuid())
  voiceNoteId String    @unique
  text        String
  language    String
  duration    Float
  confidence  Float     @default(0.0)
  wordCount   Int       @default(0)
  timestamp   DateTime  @default(now())
  summaries   Summary[]
  voiceNote   VoiceNote @relation(fields: [voiceNoteId], references: [id], onDelete: Cascade)

  @@index([voiceNoteId])
}

model Summary {
  id              String        @id @default(cuid())
  voiceNoteId     String        @unique
  transcriptionId String
  summary         String
  keyPoints       String
  actionItems     String
  language        String
  timestamp       DateTime      @default(now())
  transcription   Transcription @relation(fields: [transcriptionId], references: [id], onDelete: Cascade)
  voiceNote       VoiceNote     @relation(fields: [voiceNoteId], references: [id], onDelete: Cascade)

  @@index([voiceNoteId])
  @@index([transcriptionId])
}

model Event {
  id          String    @id @default(cuid())
  eventId     String    @unique
  aggregateId String
  eventType   String
  payload     String
  occurredAt  DateTime  @default(now())
  voiceNote   VoiceNote @relation(fields: [aggregateId], references: [id], onDelete: Cascade)

  @@index([aggregateId])
  @@index([occurredAt])
}

model AnonymousSession {
  id         String   @id @default(cuid())
  sessionId  String   @unique
  usageCount Int      @default(0)
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())

  @@index([sessionId])
  @@index([createdAt])
}

model LoginAttempt {
  id          String   @id @default(cuid())
  email       String
  ipAddress   String
  success     Boolean
  attemptedAt DateTime @default(now())

  @@index([email, attemptedAt])
  @@index([email, success])
}

model Entity {
  id              String          @id @default(cuid())
  userId          String
  name            String
  type            String
  value           String
  aliases         String?
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageLogs       EntityUsage[]
  projectEntities ProjectEntity[]

  @@unique([userId, name, type])
  @@index([userId])
}

model Project {
  id              String          @id @default(cuid())
  userId          String
  name            String
  description     String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  usageLogs       EntityUsage[]
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectEntities ProjectEntity[]
  projectNotes    ProjectNote[]
  voiceNotes      VoiceNote[]

  @@unique([userId, name])
  @@index([userId])
}

model ProjectEntity {
  projectId String
  entityId  String
  addedAt   DateTime @default(now())
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, entityId])
}

model ProjectNote {
  projectId   String
  voiceNoteId String
  addedAt     DateTime  @default(now())
  voiceNote   VoiceNote @relation(fields: [voiceNoteId], references: [id], onDelete: Cascade)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, voiceNoteId])
}

model EntityUsage {
  id            String    @id @default(cuid())
  entityId      String
  voiceNoteId   String
  projectId     String?
  wasUsed       Boolean   @default(false)
  wasCorrected  Boolean   @default(false)
  originalText  String?
  correctedText String?
  createdAt     DateTime  @default(now())
  project       Project?  @relation(fields: [projectId], references: [id])
  voiceNote     VoiceNote @relation(fields: [voiceNoteId], references: [id])
  entity        Entity    @relation(fields: [entityId], references: [id])

  @@index([entityId])
  @@index([voiceNoteId])
}
