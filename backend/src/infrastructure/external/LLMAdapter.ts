// LLMAdapter implementation for summarization

export interface SummarizationResult {
  summary: string;
  keyPoints: string[];
  actionItems: string[];
}

export class LLMAdapter {
  constructor(
    private readonly config: any,
    private readonly observability: any
  ) {}

  async summarize(
    text: string,
    systemPrompt?: string,
    userPrompt?: string
  ): Promise<SummarizationResult> {
    const traceId = await this.observability.startTrace('llm.summarize', {
      textLength: text.length,
      hasSystemPrompt: !!systemPrompt,
      hasUserPrompt: !!userPrompt
    });

    try {
      // Check if OpenAI is configured
      const apiKey = process.env.OPENAI_API_KEY;
      if (!apiKey) {
        console.warn('OpenAI API key not configured, using mock summary');
        return this.getMockSummary();
      }

      // Use GPT-5-mini for cost-effective summarization with structured outputs
      const model = 'gpt-5-mini';
      
      // Prepare the prompt
      const defaultSystemPrompt = `You are an AI assistant that creates concise summaries of voice transcriptions.
Your task is to:
1. Create a brief summary (2-3 sentences) of the main content
2. Extract 3-5 key points from the transcription
3. Identify any action items or tasks mentioned

Respond in JSON format with the following structure:
{
  "summary": "brief summary text",
  "keyPoints": ["key point 1", "key point 2", ...],
  "actionItems": ["action 1", "action 2", ...]
}`;

      const finalSystemPrompt = systemPrompt || defaultSystemPrompt;
      const finalUserPrompt = userPrompt || `Please summarize the following transcription:\n\n${text}`;

      // Call OpenAI API with structured output
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model,
          messages: [
            { role: 'system', content: finalSystemPrompt },
            { role: 'user', content: finalUserPrompt }
          ],
          response_format: { type: 'json_object' },
          temperature: 0.3,
          max_tokens: 1000
        })
      });

      if (!response.ok) {
        const error = await response.text();
        console.error('OpenAI API error:', error);
        
        // Fallback to mock if API fails
        console.warn('Falling back to mock summary due to API error');
        return this.getMockSummary();
      }

      const data = await response.json() as any;
      const content = data.choices[0].message.content;
      
      try {
        const result = JSON.parse(content) as SummarizationResult;
        
        // Validate the response structure
        if (!result.summary || !Array.isArray(result.keyPoints) || !Array.isArray(result.actionItems)) {
          console.warn('Invalid response structure from OpenAI, using mock');
          return this.getMockSummary();
        }
        
        await this.observability.endTrace(traceId, { 
          success: true,
          model,
          responseLength: content.length
        });
        
        return result;
      } catch (parseError) {
        console.error('Failed to parse OpenAI response:', parseError);
        return this.getMockSummary();
      }
      
    } catch (error) {
      await this.observability.endTrace(traceId, null, error as Error);
      console.error('LLM summarization error:', error);
      
      // Return mock summary as fallback
      return this.getMockSummary();
    }
  }

  private getMockSummary(): SummarizationResult {
    return {
      summary: 'This is a mock summary of the transcribed text. In production, this would be generated by the LLM.',
      keyPoints: [
        'Key point 1: Important information discussed',
        'Key point 2: Action items identified',
        'Key point 3: Decisions made during the meeting'
      ],
      actionItems: [
        'Follow up with team on project status',
        'Schedule next meeting for review',
        'Send documentation to stakeholders'
      ]
    };
  }
}