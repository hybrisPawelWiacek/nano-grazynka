// LLMAdapter implementation for summarization

export interface SummarizationResult {
  summary: string;
  keyPoints: string[];
  actionItems: string[];
}

export class LLMAdapter {
  constructor(
    private readonly config: any,
    private readonly observability: any
  ) {}

  async summarize(
    text: string,
    language: Language,
    systemPrompt?: string,
    userPrompt?: string
  ): Promise<SummarizationResult> {
    try {
      // Check for OpenRouter API key (replaces OpenAI)
      const apiKey = process.env.OPENROUTER_API_KEY || process.env.OPENAI_API_KEY;
      
      if (!apiKey) {
        console.warn('OpenRouter/OpenAI API key not configured, using mock summary');
        return this.getMockSummary();
      }

      // Use Gemini Flash via OpenRouter for cost-effective summarization
      const model = 'google/gemini-2.0-flash-001'; // Fast and cost-effective
      // Alternative: 'google/gemini-2.5-pro-exp-03-25' for higher reasoning
      
      // Prepare the prompt
      const defaultSystemPrompt = `You are an AI assistant that creates concise summaries of voice transcriptions.
Your task is to:
1. Create a brief summary (2-3 sentences) of the main content
2. Extract 3-5 key points from the transcription
3. Identify any action items or tasks mentioned

Respond ONLY with valid JSON format with the following structure:
{
  "summary": "brief summary text",
  "keyPoints": ["key point 1", "key point 2", ...],
  "actionItems": ["action 1", "action 2", ...]
}`;

      const finalSystemPrompt = systemPrompt || defaultSystemPrompt;
      const finalUserPrompt = userPrompt || `Please summarize the following transcription:\n\n${text}`;

      // Determine which API endpoint to use
      const isOpenRouter = process.env.OPENROUTER_API_KEY && model.startsWith('google/');
      const apiUrl = isOpenRouter 
        ? 'https://openrouter.ai/api/v1/chat/completions'
        : 'https://api.openai.com/v1/chat/completions';

      // Call API with structured output
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      };

      // Add OpenRouter specific headers if using OpenRouter
      if (isOpenRouter) {
        headers['HTTP-Referer'] = 'https://nano-grazynka.app'; // Optional: your app URL
        headers['X-Title'] = 'nano-Grazynka'; // Optional: your app name
      }

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          model: isOpenRouter ? model : 'gpt-4o-mini', // Use Gemini for OpenRouter, GPT for OpenAI
          messages: [
            { role: 'system', content: finalSystemPrompt },
            { role: 'user', content: finalUserPrompt }
          ],
          response_format: { type: 'json_object' },
          temperature: 0.3,
          ...(isOpenRouter ? {} : { max_completion_tokens: 1000 }) // OpenRouter doesn't use max_completion_tokens
        })
      });

      if (!response.ok) {
        const error = await response.text();
        console.error(`${isOpenRouter ? 'OpenRouter' : 'OpenAI'} API error:`, error);
        
        // Fallback to mock if API fails
        console.warn('Falling back to mock summary due to API error');
        return this.getMockSummary();
      }

      const data = await response.json();
      const content = data.choices?.[0]?.message?.content;

      if (!content) {
        console.warn('No content in API response, using mock summary');
        return this.getMockSummary();
      }

      // Parse JSON response
      try {
        const result = JSON.parse(content);
        
        // Validate and normalize the response
        return {
          summary: result.summary || 'Summary not available',
          keyPoints: Array.isArray(result.keyPoints) ? result.keyPoints : [],
          actionItems: Array.isArray(result.actionItems) ? result.actionItems : []
        };
      } catch (parseError) {
        console.error('Failed to parse API response as JSON:', parseError);
        console.error('Response content:', content);
        return this.getMockSummary();
      }

    } catch (error) {
      console.error('Error generating summary:', error);
      return this.getMockSummary();
    }
  }

  private getMockSummary(): SummarizationResult {
    return {
      summary: 'This is a mock summary of the transcribed text. In production, this would be generated by the LLM.',
      keyPoints: [
        'Key point 1: Important information discussed',
        'Key point 2: Action items identified',
        'Key point 3: Decisions made during the meeting'
      ],
      actionItems: [
        'Follow up with team on project status',
        'Schedule next meeting for review',
        'Send documentation to stakeholders'
      ]
    };
  }
}